Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/ThrusterSmall"
	IconNameKey = "Parts/ThrusterSmallIcon"
	ID = "stafa.fed_impulse_3x2"
	EditorGroup = "Starfleet"
	DescriptionKey = "Parts/ThrusterSmallDesc"
	Resources
	[
		[steel, 80]
		[coil2, 20]
		[tristeel, 10]
	]
	TypeCategories = [thruster, uses_power, impulse]
	Size = [3, 2]
	PhysicalRect = [0, 0, 3, 1]
	SaveRect = &PhysicalRect
	BoundingRectType = Physical
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "impulse"
	MaxHealth = 5000
	ThrusterForce = 3000
	ThrustIncreaseTime = 0
	ThrustRecoveryTime = 0
	FuelUsage = 500
	ReceivableBuffs : ^/0/ReceivableBuffs [Engine, AntimatterPower]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [21.33, 42.66]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		EngineBuffToggle
		{
			Type = BuffToggle
			BuffType = Engine
		}
		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = EngineBuffToggle
			Invert = true
			IncludeInBlueprints = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = BatteryStorage
					DefaultPriority = &/PRIORITIES/Thruster_Supply
					ResupplyThreshold = 500
					OperationalToggle = PowerToggle
				}
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, .5]
			OperationalToggle = IsOperational
			AnimationSpeedFactor = MainThruster
			AnimationSpeedFactorRenormalize = [0.75, 2.0]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 1]
					}
					{
						File = "floor_33.png"
						Size = [3, 1]
					}
					{
						File = "floor_66.png"
						Size = [3, 1]
					}
				]
			}
			//OperationalDoodad
			//{
			//	Layer = "roof_doodads"
			//	Offset = [0, .5]
			//	DamageLevels
			//	[
			//		{
			//			AnimationFiles
			//			[
			//				"nozzle.png"
			//				"nozzle.png"
			//				"nozzle.png"
			//				"nozzle.png"
			//				"nozzle.png"
			//				"nozzle.png"
			//				"nozzle.png"
			//				"nozzle.png"
			//			]
			//			Size = [3, 2]
			//			AnimationInterval = 0.075
			//		}
			//	]
			//}
			//NonOperationalDoodad
			//{
			//	Layer = "roof_doodads"
			//	Offset = [0, .5]
			//	DamageLevels
			//	[
			//		{
			//			File = "nozzle.png"
			//			Size = [3, 2]
			//		}
			//	]
			//}
			//OperationalLighting
			//{
			//	Layer = "lights_add"
			//	Offset = [0, .5]
			//	DamageLevels
			//	[
			//		{
			//			AnimationFiles
			//			[
			//				"lights.png"
			//				"lights2.png"
			//			]
			//			Size = [1, 2]
			//			AnimationInterval = 0.1
			//		}
			//	]
			//}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 1]
					}
					{
						File = "walls_33.png"
						Size = [3, 1]
					}
					{
						File = "walls_66.png"
						Size = [3, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [3, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [3, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [3, 1]
					}
				]
			}
			//OperationalRoofDoodad
			//{
			//	Layer = "roof_doodads"
			//	DamageLevels
			//	[
			//		{
			//			File = "roof_glows.png"
			//			Size = [1, 1]
			//		}
			//		{
			//			File = "roof_glows_33.png"
			//			Size = [1, 1]
			//		}
			//		{
			//			File = "roof_glows_66.png"
			//			Size = [1, 1]
			//		}
			//	]
			//}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 0.22]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [1.5, 1.5]
						Z = 1.0 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [255*1.0,116*1.0, 24*1.0]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [3, 1]
				}
				{
					File = "batteries2.png"
					Size = [3, 1]
				}
				{
					File = "batteries3.png"
					Size = [3, 1]
				}
				{
					File = "batteries4.png"
					Size = [3, 1]
				}
				{
					File = "batteries5.png"
					Size = [3, 1]
				}
				{
					File = "batteries6.png"
					Size = [3, 1]
				}
				{
					File = "batteries7.png"
					Size = [3, 1]
				}
				{
					File = "batteries8.png"
					Size = [3, 1]
				}
				{
					File = "batteries9.png"
					Size = [3, 1]
				}
				{
					File = "batteries10.png"
					Size = [3, 1]
				}
				{
					File = "batteries11.png"
					Size = [3, 1]
				}
				{
					File = "batteries12.png"
					Size = [3, 1]
				}
				{
					File = "batteries13.png"
					Size = [3, 1]
				}
				{
					File = "batteries14.png"
					Size = [3, 1]
				}
				{
					File = "batteries15.png"
					Size = [3, 1]
				}
				{
					File = "batteries16.png"
					Size = [3, 1]
				}
				{
					File = "batteries17.png"
					Size = [3, 1]
				}
				{
					File = "batteries18.png"
					Size = [3, 1]
				}
			]
		}

		ThrustEffects
		{
			Type = ContinuousEffects
			ChainedTo = MainThruster
			FactorMediaEffectsIntensityWith = MainThruster
			AnchorMediaEffects = true
			MediaEffects
			[
				&<particles/thruster_plume_small.rules>
				: /COMMON_SOUNDS/ThrusterRumble
				{
					Volume = .075
					Speed = 2
					MaxConcurrentVolume = .15
				}
			]
		}

		MainThruster
		{
			Type = Thruster
			Location = [1.5, 1]// Relative to upper-left corner of unrotated part.
			Rotation = 90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = { BaseValue=1; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		NozzleCollider
		{
			Type = PolygonCollider
			Vertices
			[
				[.66, 3]
				[2.33, 3]
				[2.66, 4]
				[.33, 4]
			]
			Density = 1
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [1.5, 1]
		}

		ThrusterHum
		{
			Type = ContinuousEffects
			Location = [1.5, 1]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .05
					Speed = 1.5
					MaxConcurrentVolume = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 2]
		}
	}

	Stats
	{
		ThrusterForce = &~/Part/ThrusterForce
		ThrusterRampUp = &~/Part/ThrustIncreaseTime
		ThrusterPowerUsage = (&~/Part/FuelUsage) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&ThrusterPowerUsage) / 2
		RecCrew = (&RecPower) * 4
	}
}